# Branch: 분기된 가지 (다른 차원)

- 프로젝트를 하나 이상의 모습으로 관리해야 할 때

  - 예) 실베포용, 테스츠 서버용, 새로운 시도용

- 여러 작업들이 가각 독립되어 진행될 때

  - 예) 신기능 1, 신기능 2, 코드개선, 긴급수정...
  - 각각의 차원에서 작업한 뒤 확장된 것을 메인 차원에 통합

## 브렌치 생성 / 이동 / 삭제하기

Branch1란 이름의 브랜치 생성

```
git branch Branch1
```

브랜치 목록 확인
```
git branch
```

Branch1 브런치 이동

```
git switch Branch1
```

## 서로 다른 브랜치를 합히는 두 방식

- merge : 두 브랜치를 한 커밋에 이어붙입니다.

  - 브랜티 사용내역을 남길 필요가 있을 때 적합한 방식입니다.

- rebase : 브랜치를 다른 브랜치에 이어붙입니다.

  - 한 줄로 깔끔히 정리된 내역을 유지하기 원한 때 적합합니다.
  - 이미 팀원과 공유된 커밋들에 대해서는 사용하지 않는 것이 좋습니다.

## merge는 reset 으로 되돌리기 가능

- merge 도 하나의 커밋!
- merge 하기 전 해당 브랜치의 마지막 시점으로

## 변합된 브랜티는 삭제

삭제 전 소스트리에서 Branch1 위치확인

```
git branch -d Branch1
```

rebase로 합치기

Branch2 브랜치를 main 브랜치로 rebase

- Branch2 브린치로 이동
  - ! merge 때와는 반대!
- 아래의 명령어로 병합

```
git rebase main
```

- 소스트리에서 상태 확인
  - main 브랜치는 뒤쳐져 있는 상황

```
git merge Brancd2
```

- Branch2 브랜치 삭제

--